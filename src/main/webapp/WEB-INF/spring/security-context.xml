<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-5.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	<!-- Spring Security HTTP 요청 설정 -->

	<!-- 사용자가 접근 권한이 없는 경우 처리를 담당하는 CustomAccessDeniedHander 빈 정의 -->
	<bean id="customAccessDenied" class="org.zerock.security.CustomAccessDeniedHandler"></bean>

	<!-- 사용자가 로그인에 성공한 경우 처리를 담당하는 CustomLoginSuccessHandler 빈 정의 -->
	<bean id="customLoginSuccess" class="org.zerock.security.CustomLoginSuccessHandler"></bean>



	<!-- 테스트를 위해 사용자가 입력한 비밀번호를 암호화하지 않고 그대로 사용하는 CustomNoOpPasswordEncoder 
		클래스를 빈으로 정의 -->
	<!-- <bean id="customPasswordEncoder" class="org.zerock.security.CustomNoOpPasswordEncoder"></bean> -->


     <!-- BCryptPasswordEncoder를 사용하여 비밀번호를 안전하게 해싱하는 데 사용 -->
     <bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
     
     <bean id="customUserDetailsService" class="org.zerock.security.CustomUserDetailsService"></bean>
     
           
	<security:http>

		<!-- 로그인 페이지인 "/customLogin"으로 이동하여 사용자가 인증에 성공하면, Spring Security는 customLoginSuccess 
			빈에 정의된 커스텀 로그인 성공 핸들러를 사용하여 처리한다. -->
		<security:form-login login-page="/customLogin"/>

		<!-- 로그아웃 관련 설정, 사용자가 로그아웃을 요청할 때 호출되는 URL을 지정, 세션의 무효화 -->
		<security:logout logout-url="/customLogout" invalidate-session="true" />

		<!-- 모든 사용자가 접근 가능한 URL -->
		<security:intercept-url pattern="/sample/all"  access="permitAll" />

		<!-- 회원 권한을 가진 사용자만 접근 가능한 URL -->
		<security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MEMBER')" />

		<!-- /sample/admin" URL은 ROLE_ADMIN 역할을 가진 사용자만 접근 가능 -->
		<security:intercept-url pattern="/sample/admin" access="hasRole('ROLE_ADMIN')" />

		<!-- 접근 거부 핸들러 설정 -->
		<!-- <security:access-denied-handler error-page="/accessError"/> -->
		<!-- 접근 제한 인터페이스를 직접구현 페이지 설정 -->
		<security:access-denied-handler ref="customAccessDenied" />

		<!-- CSRF 토큰 비활성화 -->
		<security:csrf disabled="true" />
	</security:http>

	<!-- Spring Security 인증 관리자 설정 -->
	<security:authentication-manager>
		<!-- Spring Security 인증 제공자 설정 -->
		<security:authentication-provider user-service-ref="customUserDetailsService">

			<!-- customPasswordEncoder 빈을 사용하여 비밀번호를 인코딩하는 설정 -->
			<!--  <security:password-encoder ref="customPasswordEncoder" /> -->
			
			<!-- bcryptPasswordEncoder를 참조하여 비밀번호를 안전하게 인코딩하는 데 사용한다. -->
			<security:password-encoder ref="bcryptPasswordEncoder"/>
		</security:authentication-provider>
	</security:authentication-manager>
</beans>
